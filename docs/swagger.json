{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API documentation for the Orders microservice.",
        "title": "Orders Microservice",
        "contact": {
            "name": "Shay Jacoby",
            "url": "https://github.com/shayja/",
            "email": "shayja@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/order": {
            "get": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Responds with the list of user orders as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders (array) by the user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Add a new order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create and store a new order in the database.",
                "parameters": [
                    {
                        "description": "Order data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.OrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/order/{id}": {
            "get": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Responds with an entity of order as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by order ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/order/{id}/status": {
            "put": {
                "security": [
                    {
                        "apiKey": []
                    }
                ],
                "description": "Update the status of an order",
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The date and time the order was created\nexample: 2024-07-01T12:00:00Z",
                    "type": "string",
                    "minLength": 20,
                    "example": "2024-07-01T12:00:00Z"
                },
                "id": {
                    "description": "The UUID of a product\nexample: 6204037c-30e6-408b-8aaa-dd8219860b4b",
                    "type": "string",
                    "minLength": 36,
                    "example": "6204037c-30e6-408b-8aaa-dd8219860b4b"
                },
                "status": {
                    "description": "The status of the order (1=created/pending, 2=processing, 3=completed, 4=cancelled)\nexample: 2\nrequired: true",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "example": 1
                },
                "total_price": {
                    "description": "The total price of the order\nexample: 100.00\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 100
                },
                "updated_at": {
                    "description": "The date and time the order was last updated\nexample: 2025-01-01T12:00:00Z",
                    "type": "string"
                },
                "user_id": {
                    "description": "The user that created the order\nexample: 451fa817-41f4-40cf-8dc2-c9f22aa98a4f\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "451fa817-41f4-40cf-8dc2-c9f22aa98a4f"
                }
            }
        },
        "entities.OrderDetail": {
            "type": "object",
            "properties": {
                "order_id": {
                    "description": "The UUID of the related order.\nexample: 451fa817-41f4-40cf-8dc2-c9f22aa98a4f\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "451fa817-41f4-40cf-8dc2-c9f22aa98a4f"
                },
                "product_id": {
                    "description": "The UUID of the related product\nexample: 063d0ff7-e17e-4957-8d92-a988caeda8a1\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "063d0ff7-e17e-4957-8d92-a988caeda8a1"
                },
                "quantity": {
                    "description": "The quantity of the product\nexample: 2\nrequired: true",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "example": 1
                },
                "total_price": {
                    "description": "The date and time the order detail was created\nexample: 2024-07-01T12:00:00Z\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 55
                },
                "unit_price": {
                    "description": "The unit price of the product\nexample: 50.00\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 50
                }
            }
        },
        "entities.OrderRequest": {
            "type": "object",
            "properties": {
                "order_details": {
                    "description": "Array of the order line items.\nexample: [{ \"product_id\": \"063d0ff7-e17e-4957-8d92-a988caeda8a1\", \"quantity\": 1, \"unit_price\": 101.00, \"total_price\": 102.00 }]\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.OrderDetail"
                    }
                },
                "status": {
                    "description": "The status of the order (1=created/pending, 2=processing, 3=completed, 4=cancelled)\nexample: 1\nrequired: true",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "example": 1
                },
                "total_price": {
                    "description": "The total price of the order\nexample: 100.00\nrequired: true",
                    "type": "number",
                    "format": "float64",
                    "example": 100
                },
                "user_id": {
                    "description": "The user that creates the order\nexample: 451fa817-41f4-40cf-8dc2-c9f22aa98a4f\nrequired: true",
                    "type": "string",
                    "minLength": 36,
                    "example": "063d0ff7-e17e-4957-8d92-a988caeda8a1"
                }
            }
        }
    },
    "securityDefinitions": {
        "apiKey": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Please add it in the format \"Bearer {AccessToken}\" to authorize your requests.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}